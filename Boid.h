/*
A FAIRE
- créer un tableau Nx2 de Birds
- le remplir de xi et yi aléatoires
- définir le rayon de perception par une méthode qui compte le nombre de bird K dans ce cercle
- définir la distance de contact c
- définir les obstacles
- définir v1, v2 et v3
*/


#ifndef __BOID_H__
#define __BOID_H__


// ===========================================================================
//                                  Libraries
// ===========================================================================
#include <cstdio>
#include <cstdlib>
#include "Bird.h"



// ===========================================================================
//                                Project Files
// ===========================================================================




// ===========================================================================
//                              Class declarations
// ===========================================================================

class Boid
{
  public :
    
    // =======================================================================
    //                                 Enums
    // =======================================================================
    
    // =======================================================================
    //                               Constructors
    // =======================================================================
    Boid(void);                            // constructor by default

    // =======================================================================
    //                                Destructor
    // =======================================================================
    ~Boid(void);

    // =======================================================================
    //                            Accessors: getters
    // =======================================================================

    int _N(void) const;

	double _r(void) const;

	double _gam1(void) const;
	double _gam2(void) const;
	double _gam3(void) const;


    // =======================================================================
    //                            Accessors: setters
    // =======================================================================

    // =======================================================================
    //                                Operators
    // =======================================================================
	    
    // =======================================================================
    //                              Public Methods
    // =======================================================================
	double vxevol(void);
	double v1x(void);
	double v2x(void);
	double v3x(void);
	double vyevol(void);
	double v1y(void);
	double v2y(void);
	double v3y(void);
	int K();
	

    // =======================================================================
    //                             Public Attributes
    // =======================================================================
    
	static const int N; // number of birds in the whole environment



  protected :

    // =======================================================================
    //                             Protected Attributes
    // =======================================================================
   static const double r;                            // perception radius
   static Bird* Birds;                                      // table of birds

 // parameters gamma1, gamma2 and gamma3  
	static const double gam1;
    static const double gam2;
    static const double gam3;

};


// ===========================================================================
//                              Getters' definitions
// ===========================================================================

// ===========================================================================
//                              Setters' definitions
// ===========================================================================

// ===========================================================================
//                             Operators' definitions
// ===========================================================================



// ===========================================================================
//                          Inline functions' definition
// ===========================================================================



#endif

