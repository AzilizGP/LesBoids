//****************************************************************************
//
//
//
//****************************************************************************


 
 
// ===========================================================================
//                                   Libraries
// ===========================================================================



// ===========================================================================
//                                 Project Files
// ===========================================================================
#include "Bird.h"
#include "cstdlib"
#include "ctime"



//############################################################################
//                                                                           #
//                              Class Bird                                   #
//                                                                           #
//############################################################################

// ===========================================================================
//                         Definition of static attributes
// ===========================================================================

 const double Bird::dt=1/100;
//	srand(time(NULL));
int I=(((int) rand())/RAND_MAX)*100;


// ===========================================================================
//                                  Constructors
// ===========================================================================

Bird::Bird(void)
{
	x = (((double) rand())/RAND_MAX)*100;         //gives  a random number between 0 and 100
	y = (((double) rand())/RAND_MAX)*100;
	vx = rand();
	vy = rand();
}

Bird::Bird( const Bird& bird )
{
	// printf("call to Bird copy constrcutor\n");
	x = bird.x;
	y = bird.y;
	vx = bird.vx;
	vy = bird.vy;
}

// ===========================================================================
//                                  Destructor
// ===========================================================================
Bird::~Bird(void)
{
}

// ===========================================================================
//                                 Public Methods
// ===========================================================================

double Bird::xmove(void)
{
	x += dt*vx;
}
//--------------------------------------------------------------------------
double Bird::ymove(void)
{
	y += dt*vy;
}



// ===========================================================================
//                                Protected Methods
// ===========================================================================

// ===========================================================================
//                               Non inline accessors
// ===========================================================================


double Bird::_x()
{
  return x;
}
//--------------------------------------------------------------------------
double Bird::_y()
{
  return y;
}
//--------------------------------------------------------------------------
double Bird::_vx()
{
  return vx;
}
//--------------------------------------------------------------------------
double Bird::_vy()
{
  return vy;
}
//--------------------------------------------------------------------------
double Bird::_dt() const
{
  return dt;
}


